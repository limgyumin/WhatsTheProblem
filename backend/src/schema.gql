# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Mailer {
  idx: Float!
  verifyCode: String!
  email: String!
  expiredAt: DateTime!
  isVerified: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  idx: Float!
  avatar: String
  gitHubId: String
  email: String
  password: String
  name: String!
  bio: String
  score: Int!
  isAdmin: Boolean!
  createdAt: DateTime!
  posts(option: UserPostOption!): [Post!]!
  questions(option: UserQuestionOption!): [Question!]!
}

input UserPostOption {
  page: Int!
  limit: Int!
}

input UserQuestionOption {
  page: Int!
  limit: Int!
}

type Like {
  idx: Int!
  likeCount: Int!
  liked: Boolean!
  user: User!
  userIdx: Int!
  post: Post!
  postIdx: Int!
}

type Answer {
  idx: Int!
  content: String!
  user: User!
  userIdx: Int!
  question: Question!
  fk_question_idx: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  commentCount: Int!
}

type Question {
  idx: Int!
  title: String!
  content: String!
  isTemp: Boolean!
  user: User!
  userIdx: Int!
  answers: [Answer!]!
  tags: [Tag!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  answerCount: Int!
}

type Tag {
  idx: Int!
  name: String!
  posts(option: TagOption!): [Post!]!
  questions: [Question!]!
  postCount: Int!
}

input TagOption {
  page: Int!
  limit: Int!
}

type Post {
  idx: Float!
  title: String!
  content: String!
  thumbnail: String
  isTemp: Boolean!
  likeCount: Int!
  commentCount: Int!
  user: User!
  userIdx: Int!
  tags: [Tag!]!
  likes: [Like!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  idx: Float!
  content: String!
  user: User!
  userIdx: Int!
  post: Post!
  postIdx: Int!
  answer: Answer!
  answerIdx: Int!
  commentType: CommentType!
  replyCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum CommentType {
  Post
  Answer
}

type Reply {
  idx: Float!
  content: String!
  user: User!
  userIdx: Int!
  comment: Comment!
  commentIdx: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LikeObject {
  likeCount: Int!
  likes: [Like!]!
}

type Query {
  me: User!
  user(idx: Float!): User!
  users(option: UserOption!): [User!]!
  mailers(option: MailerOption!): [Mailer!]!
  post(idx: Int!): Post!
  posts(option: PostOption!): [Post!]!
  comments(parentIdx: Int!, commentType: CommentType!): [Comment!]!
  replies(commentIdx: Int!): [Reply!]!
  tag(idx: Int!): Tag!
  tags: [Tag!]!
  like(postIdx: Float!): LikeObject!
  question(idx: Int!): Question!
  questions(option: QuestionOption!): [Question!]!
  answers(questionIdx: Int!): [Answer!]!
}

input UserOption {
  page: Int!
  limit: Int!
}

input MailerOption {
  page: Int!
  limit: Int!
}

input PostOption {
  page: Int!
  limit: Int!
}

input QuestionOption {
  page: Int!
  limit: Int!
}

type Mutation {
  register(user: CreateUserInput!): String!
  gitHubAuth(code: String!): String!
  login(email: String!, password: String!): String!
  updateUser(user: UpdateUserInput!): User!
  deleteUser: User!
  createMailer(email: String!): Mailer!
  verifyMailer(email: String!, verifyCode: String!): Mailer!
  createPost(post: CreatePostInput!): Post!
  updatePost(idx: Int!, post: UpdatePostInput!): Post!
  deletePost(idx: Int!): Post!
  createComment(parentIdx: Int!, commentType: CommentType!, content: String!): Comment!
  updateComment(idx: Int!, content: String!): Comment!
  deleteComment(idx: Int!): Comment!
  createReply(commentIdx: Int!, content: String!): Reply!
  updateReply(idx: Int!, content: String!): Reply!
  deleteReply(idx: Int!): Reply!
  createTag(name: String!): Tag!
  updateTag(idx: Int!, name: String!): Tag!
  deleteTag(idx: Int!): Tag!
  postLike(postIdx: Float!): Like!
  createQuestion(question: CreateQuestionInput!): Question!
  updateQuestion(idx: Int!, question: UpdateQuestionInput!): Question!
  deleteQuestion(idx: Int!): Question!
  createAnswer(questionIdx: Int!, content: String!): Answer!
  updateAnswer(idx: Int!, content: String!): Answer!
  deleteAnswer(idx: Int!): Answer!
}

input CreateUserInput {
  avatar: String
  name: String!
  email: String!
  password: String!
  bio: String!
}

input UpdateUserInput {
  avatar: String
  name: String
  password: String
  bio: String
}

input CreatePostInput {
  title: String!
  content: String!
  thumbnail: String
  isTemp: Boolean
  tags: [PostTagInput!]
}

input PostTagInput {
  name: String!
}

input UpdatePostInput {
  title: String!
  content: String!
  thumbnail: String
  isTemp: Boolean
  tags: [PostTagInput!]
}

input CreateQuestionInput {
  title: String!
  content: String!
  isTemp: Boolean
  tags: [QuestionTagInput!]
}

input QuestionTagInput {
  name: String!
}

input UpdateQuestionInput {
  title: String!
  content: String!
  isTemp: Boolean
  tags: [QuestionTagInput!]
}
